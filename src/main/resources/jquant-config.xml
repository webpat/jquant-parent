<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-2.5.xsd
		http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
		http://www.springframework.org/schema/tx
			http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util
			http://www.springframework.org/schema/util/spring-util-2.5.xsd">

	<!--
	property-placeholder
	This element activates the replacement of ${...} placeholders, 
	resolved against the specified properties file
	-->
	<context:property-placeholder
		location="classpath:hibernate.properties"/>
	<!--
	util:properties, doc schema util : http://static.springsource.org/spring/docs/2.5.x/reference/xsd-config.html 
	Chargement des fichiers .properties injectables via annnotation
	ex:
	@Resource(name="smtpProperties")
	private java.util.Properties smtpProperties;
	...
	String mail = (String)smtpProperties.get("smtp.mail.helpdesk")
	
	Note 1: L'autre solution est de definir un bean spring xml pour chaque classe utilisant les props: ex:
	<bean id="fileDAO" class="nc.gouv.pac.commons.dao.file.impl.FileDAO">
		<property name="smtp.mail.dtsi" value="${smtp.mail.dtsi}" /> 
	</bean>
	Note 2: A venir en Spring 3 annotation: @Value
	-->
	<util:properties id="hibernateProperties" location="classpath:hibernate.properties"/>


	<!--  HSQL Data Source  -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.hsqldb.jdbcDriver" />
		<property name="url" value="jdbc:hsqldb:hsql://localhost/sample" />
		<property name="username" value="sa" />
		<property name="password" value="" />
	</bean>

	<!-- Hibernate Session Factory Use the dataSource bean  -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties" ref="hibernateProperties"/>
		<property name="packagesToScan" value="/org/jquant/" />

	</bean>
	
  <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" /> 
	
	
	<!-- TODO: externaliser le contexte de datasource + session hibernate -->
	<!--import resource="classpath*:hibernateWithHQL.xml" /-->
	
	<!-- Configuration par annotation. -->
	<context:annotation-config />
	<!-- Component Scan ROOT  -->
	<context:component-scan base-package="org.jquant" />
	
	

</beans>